#if UNITY_EDITOR
using System.IO;
using System.Linq;
using System.Text;
using SelfishFramework.Src.Core;
using SelfishFramework.Src.SLogs;
using UnityEditor;
using UnityEngine;

namespace SelfishFramework.Src.Unity.Editor
{
    public static class IdentifierMapCodegen
    {
        private const string GENERATED_PATH = "Assets/Scripts/Generated/IdentifierMaps.g.cs";

        [MenuItem("Selfish/Generate Identifier Maps")]
        public static void Generate()
        {
            var guids = AssetDatabase.FindAssets("t:IdentifierContainer");

            var assets = guids
                .Select(AssetDatabase.GUIDToAssetPath)
                .Select(AssetDatabase.LoadAssetAtPath<IdentifierContainer>)
                .Where(a => a != null)
                .ToList();

            var groups = assets.GroupBy(a => a.GetType());

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("namespace SelfishFramework.Src.Unity.Generated");
            sb.AppendLine("{");

            foreach (var group in groups)
            {
                var type = group.Key;
                var className = type.Name + "Map";

                sb.AppendLine($"    public static class {className}");
                sb.AppendLine("    {");

                foreach (var asset in group)
                {
                    sb.AppendLine($"        public const int {asset.name} = {asset.name.GenerateIndex()};");
                }

                sb.AppendLine("    }");
            }

            sb.AppendLine("}");

            Directory.CreateDirectory(Path.GetDirectoryName(GENERATED_PATH)!);
            File.WriteAllText(GENERATED_PATH, sb.ToString(), Encoding.UTF8);

            AssetDatabase.Refresh();

            SLog.Log($"Identifier maps generated for {groups.Count()} containers.");
        }
    }
}
#endif